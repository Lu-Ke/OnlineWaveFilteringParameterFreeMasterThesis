"""
Class for tracking a ball in a video that passes through a box.
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from .environment import Environment


class BallTracking(Environment):

	def __init__(self):
		self.initialized = False

	def computeTrack(self):
		#self.capture = cv2.VideoCapture("environments/singleball.mov")
		self.capture = cv2.VideoCapture("environments/movingcar2.webm")
		#self.capture = cv2.VideoCapture("environments/train.mp4")

		self.numframes = int(self.capture.get(7))
		print(self.numframes)
		history = 10
		bgs = cv2.createBackgroundSubtractorMOG2(history, 50, False)

		#plt.figure()
		#plt.axis([0,480,360,0])

		self.measuredTrack = np.zeros((self.numframes, 2)) - 1

		count = 0
		while(count < self.numframes):#self.numframes):
			count += 1
			img2 = self.capture.read()[1]
			cv2.imshow("Video", img2)
			foremat = bgs.apply(img2)
			cv2.waitKey(100)
			#foremat = bgs.apply(img2)
			ret, thresh = cv2.threshold(foremat, 127, 255, 0)
			#thresh = foremat
			contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
			if(len(contours) > 0):
				#m = np.mean(contours[0], axis = 0)
				m = None
				c = 0.0
				for cont in contours:
					if(280 < np.mean(cont, axis = 0)[0, 1] < 290):
						c += 1
						if(m is None):
							m = np.mean(cont, axis = 0)
						else:
							m += np.mean(cont, axis = 0)
				if(c > 0):
					m /= c
					self.measuredTrack[count - 1, :] = m[0]
					plt.plot(m[0, 0], m[0, 1], 'ob')
				#measuredTrack[count - 1, :] = m[0]
				#plt.plot(m[0, 0], m[0, 1], 'ob')
			cv2.imshow('Foreground', foremat)
			cv2.waitKey(80)
		self.capture.release()
		#print(measuredTrack)
		#np.save("ballTrajectory", measuredTrack)
		cv2.destroyAllWindows()
		plt.ylim((0, 400))
		plt.show()
		print(self.measuredTrack)

	def initialize(self, params = {}):
		self.T = 0
		#self.numframes = 25#49#53
		self.measuredTrack = np.array([[592.875     , 286.5       ],
									 [581.17735043, 283.53632479],
									 [568.49901426, 283.18744313],
									 [550.08055556, 283.75833333],
									 [552.48469388, 284.33645125],
									 [537.12923351, 284.48324421],
									 [521.01071429, 284.47314471],
									 [510.51243161, 284.89097222],
									 [490.78210678, 284.05333952],
									 [473.27412359, 283.9925609 ],
									 [455.38911089, 283.93365358],
									 [435.53514751, 284.72768172],
									 [424.76172356, 284.713147  ],
									 [409.62243887, 285.05764779],
									 [394.6068394 , 285.69598608],
									 [384.29248838, 285.50970018],
									 [365.61373893, 285.04799972],
									 [358.84222868, 285.50481174],
									 [341.4042328 , 284.59850088],
									 [322.59131214, 285.2020824 ],
									 [317.6631723 , 284.99835749],
									 [294.96791768, 285.0676505 ],
									 [299.87618507, 286.26335347],
									 [276.43515859, 285.66033966],
									 [269.17977697, 286.26024714],
									 [257.19956459, 284.24541894],
									 [240.02768722, 286.501628  ],
									 [221.73642857, 283.96761905],
									 [207.76027397, 286.09474315],
									 [200.76165675, 285.99743717],
									 [195.52307438, 284.52307438],
									 [182.81559066, 285.02765015],
									 [177.92361534, 285.69936008],
									 [169.72659817, 283.4834248 ],
									 [142.25919158, 283.95095976],
									 [144.92114348, 285.2072439 ],
									 [128.94021978, 286.0306044 ],
									 [111.30250594, 286.90529224],
									 [107.43053993, 286.26756923],
									 [103.1242519 , 284.55593372],
									 [ 75.35409368, 284.0523699 ],
									 [ 77.56619457, 285.49469418],
									 [ 54.70926587, 285.2688027 ],
									 [ 53.39710351, 286.32962963],
									 [ 34.25657009, 286.08324915],
									 [ 35.35392434, 286.40851685],
									 [ 21.82547969, 286.61986979],
									 [ 13.74519231, 286.57743819],
									# [ 13.22338137, 285.80751044],
									 [ 10.86770833, 283.20729167],
									# [  1.        , 286.        ],
									# [  0.        , 285.5       ],
									# [  0.        , 281.75      ]
									])

		#self.measuredTrack = self.measuredTrack[::2] / 100.0
		self.measuredTrack = self.measuredTrack[::1] / 100.0

		self.numframes = self.measuredTrack.shape[0]

		self.initialized = True

	def get_state_dim(self):
		return 2

	def get_action_dim(self):
		return 2

	def reset(self):
		self.T = 0
		#return self.measuredTrack[self.T]

	def step(self, u):
		"""
		Description: Moves the system dynamics one time-step forward.
		Args:
			u (numpy.ndarray): control input, an n-dimensional real-valued vector.
		Returns:
			A new observation from the LDS.
		"""
		assert self.initialized
		assert self.T < self.numframes
		self.T += 1

		return self.measuredTrack[self.T - 1]

	def hidden(self):
		"""
		Description: Return the hidden state of the system.
		Args:
			None
		Returns:
			h: The hidden state of the LDS.
		"""
		assert self.initialized
		return self.measuredTrack


	def getControlInput(self, t = -1):
		if (t < 0):
			if(self.T > self.numframes):
				return np.array([0, 0])
			return self.measuredTrack[self.T]

		if(t > self.numframes):
			return np.array([0, 0])
		return self.measuredTrack[t]
		"""
		if (t < 0):
			if(self.T > self.numframes):
				return np.array([0, 0])
			return self.measuredTrack[(self.T + 1) % self.numframes] - self.measuredTrack[self.T % self.numframes]

		if(t > self.numframes):
			return np.array([0, 0])
		return self.measuredTrack[(t + 1) % self.numframes] - self.measuredTrack[t % self.numframes]
		"""

	def getTimeSteps(self):
		return self.numframes

	def clone(self):
		return BallTracking()


	def video(self):
		cap = cv2.VideoCapture("environments/movingcar2.webm")

		history = 10
		bgs = cv2.createBackgroundSubtractorMOG2(history, 50, False)

		pics = []

		count = 0

		for k in range(80):
			img2 = cap.read()[1]

		while(count < self.numframes):#self.numframes):
			count += 1
			img2 = cap.read()[1]
			#cv2.imshow("Video", img2)
			foremat = bgs.apply(img2)
			#cv2.waitKey(100)
			ret, thresh = cv2.threshold(foremat, 127, 255, 0)
			contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
			if(len(contours) > 0):
				if(np.mean(contours[0]) != -1):
					pics.append(foremat)
			#cv2.imshow('Foreground', foremat)
			#cv2.waitKey(80)
		cap.release()
		cv2.destroyAllWindows()
		return pics



"""
[[592.875      286.5       ]
 [581.17735043 283.53632479]
 [568.49901426 283.18744313]
 [550.08055556 283.75833333]
 [ -1.          -1.        ]
 [552.48469388 284.33645125]
 [537.12923351 284.48324421]
 [521.01071429 284.47314471]
 [510.51243161 284.89097222]
 [490.78210678 284.05333952]
 [ -1.          -1.        ]
 [473.27412359 283.9925609 ]
 [455.38911089 283.93365358]
 [435.53514751 284.72768172]
 [424.76172356 284.713147  ]
 [409.62243887 285.05764779]
 [ -1.          -1.        ]
 [394.6068394  285.69598608]
 [384.29248838 285.50970018]
 [365.61373893 285.04799972]
 [358.84222868 285.50481174]
 [341.4042328  284.59850088]
 [ -1.          -1.        ]
 [322.59131214 285.2020824 ]
 [317.6631723  284.99835749]
 [294.96791768 285.0676505 ]
 [299.87618507 286.26335347]
 [276.43515859 285.66033966]
 [ -1.          -1.        ]
 [269.17977697 286.26024714]
 [257.19956459 284.24541894]
 [240.02768722 286.501628  ]
 [221.73642857 283.96761905]
 [207.76027397 286.09474315]
 [ -1.          -1.        ]
 [200.76165675 285.99743717]
 [195.52307438 284.52307438]
 [182.81559066 285.02765015]
 [157.92361534 285.69936008]
 [169.72659817 283.4834248 ]
 [ -1.          -1.        ]
 [142.25919158 283.95095976]
 [144.92114348 285.2072439 ]
 [128.94021978 286.0306044 ]
 [111.30250594 286.90529224]
 [107.43053993 286.26756923]
 [ -1.          -1.        ]
 [103.1242519  284.55593372]
 [ 75.35409368 284.0523699 ]
 [ 77.56619457 285.49469418]
 [ 54.70926587 285.2688027 ]
 [ 53.39710351 286.32962963]
 [ -1.          -1.        ]
 [ 34.25657009 286.08324915]
 [ 35.35392434 286.40851685]
 [ 21.82547969 286.61986979]
 [ 13.74519231 286.57743819]
 [ 13.22338137 285.80751044]
 [ -1.          -1.        ]
 [ 10.86770833 283.20729167]
 [  1.         286.        ]
 [  0.         285.5       ]
 [  0.         281.75      ]]
"""

"""old one:
		self.measuredTrack = np.array([
							 [  9.85      , 267.9       ],\
							 [ 32.23809524, 265.38095238],\
							 [ 61.66666667, 263.80952381],\
							 [ 87.71428571, 260.71428571],\
							 [108.15789474, 258.15789474],\
							 [129.11764706, 255.11764706],\
							 [152.42105263, 255.        ],\
							 [173.5       , 256.        ],\
							 [191.5625    , 250.0625    ],\
							 [213.6875    , 249.4375    ],\
							 [231.14285714, 247.57142857],\
							 [250.        , 248.4       ],\
							 [265.        , 246.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [ -1.        ,  -1.        ],\
							 [399.1875    , 243.1875    ],\
							 [412.57142857, 241.07142857],\
							 [426.35      , 243.15      ],\
							 [434.44444444, 244.33333333],\
							 [441.        , 245.5       ],\
							 [451.7       , 243.4       ],\
							 [464.4       , 244.7       ],\
							 [474.63157895, 246.84210526]])
"""


"""Functioning:
[[592.875     , 286.5       ],
									 [581.17735043, 283.53632479],
									 [568.49901426, 283.18744313],
									 [550.08055556, 283.75833333],
									 [552.48469388, 284.33645125],
									 [537.12923351, 284.48324421],
									 [521.01071429, 284.47314471],
									 [510.51243161, 284.89097222],
									 [490.78210678, 284.05333952],
									 [473.27412359, 283.9925609 ],
									 [455.38911089, 283.93365358],
									 [435.53514751, 284.72768172],
									 [424.76172356, 284.713147  ],
									 [409.62243887, 285.05764779],
									 [394.6068394 , 285.69598608],
									 [384.29248838, 285.50970018],
									 [365.61373893, 285.04799972],
									 [358.84222868, 285.50481174],
									 [341.4042328 , 284.59850088],
									 [322.59131214, 285.2020824 ],
									 [317.6631723 , 284.99835749],
									 [294.96791768, 285.0676505 ],
									 [299.87618507, 286.26335347],
									 [276.43515859, 285.66033966],
									 [269.17977697, 286.26024714],
									 [257.19956459, 284.24541894],
									 [240.02768722, 286.501628  ],
									 [221.73642857, 283.96761905],
									 [207.76027397, 286.09474315],
									 [200.76165675, 285.99743717],
									 [195.52307438, 284.52307438],
									 [182.81559066, 285.02765015],
									 [177.92361534, 285.69936008],
									 [169.72659817, 283.4834248 ],
									 [142.25919158, 283.95095976],
									 [144.92114348, 285.2072439 ],
									 [128.94021978, 286.0306044 ],
									 [111.30250594, 286.90529224],
									 [107.43053993, 286.26756923],
									 [103.1242519 , 284.55593372],
									 [ 75.35409368, 284.0523699 ],
									 [ 77.56619457, 285.49469418],
									 [ 54.70926587, 285.2688027 ],
									 [ 53.39710351, 286.32962963],
									 [ 34.25657009, 286.08324915],
									 [ 35.35392434, 286.40851685],
									 [ 21.82547969, 286.61986979],
									 [ 13.74519231, 286.57743819],
									# [ 13.22338137, 285.80751044],
									 [ 10.86770833, 283.20729167],
									# [  1.        , 286.        ],
									# [  0.        , 285.5       ],
									# [  0.        , 281.75      ]
									]
"""
"""
[
									 [591.33333333, 281.22222222],
									 [594.5       , 284.        ],
									 [587.25      , 284.5       ],
									 [582.42361111, 283.19444444],
									 [573.21666667, 283.70833333],
									 [566.1462585 , 283.84863946],
									 [545.77777778, 283.53472222],
									 [540.        , 284.56227106],
									 [526.61784512, 284.09683502],
									 [508.79451346, 285.04570393],
									 [495.28625426, 284.60471346],
									 [480.91133157, 285.39237213],
									 [470.93757764, 284.57094548],
									 [447.54824702, 285.02547966],
									 [438.65825147, 284.09495366],
									 [424.59175729, 284.84770967],
									 [410.43739583, 285.97131944],
									 [397.63072391, 285.08392256],
									 [380.523659  , 284.23914554],
									 [365.93926774, 284.10501078],
									 [344.11465756, 284.19714868],
									 [330.24315179, 284.41690897],
									 [314.09886593, 284.42657349],
									 [289.76639545, 284.7035945 ],
									 [281.75961571, 285.15341837],
									 [265.82605454, 284.65556105],
									 [243.29785088, 285.57080911],
									 [234.96555024, 284.83197767],
									 [218.90383743, 284.96028325],
									 [194.24103961, 284.78957023],
									 [179.60598102, 284.40256914],
									 [149.65045977, 285.46460489],
									 [147.76963289, 285.75444444],
									 [125.14415323, 285.32516081],
									 [363.63636364, 285.45454545],
									 [115.10044321, 284.89640899],
									 [ 84.21846154, 285.08098901],
									 [ 58.57361466, 284.65535592],
									 [ 55.27547076, 284.18798199],
									 [ 58.58730159, 284.47845805],
									 [ 27.33333333, 284.88888889],
									 [ 15.636     , 286.092     ],
									 [  2.02380952, 285.58928571],#back starts in the next line
									 [  6.67307692, 288.14102564],
									 [ 22.68045843, 287.28846154],
									 [ 37.08787594, 287.07706767],
									 [ 48.06987654, 285.10747585],
									 [ 64.24298104, 284.99858328],
									 [ 87.25971326, 286.37413978],
									 [ 93.44096134, 284.69471712],
									 [118.56804055, 285.67168979],
									 [132.83137092, 284.82517426],
									 [148.72745621, 284.75377115],
									 [171.41827794, 285.62197853],
									 [189.00737684, 285.07610219],
									 [224.60965171, 284.70894825],
									 [227.98927421, 284.70508397],
									 [248.26894587, 284.83666306],
									 [262.35525592, 284.50807191],
									 [278.85603429, 285.43125358],
									 [289.98633397, 284.30536146],
									 [309.67005109, 284.15094321],
									 [330.77413364, 285.13784373],
									 [346.04365773, 285.45717754],
									 [358.4481712 , 285.11466441],
									 [377.30492294, 285.49929418],
									 [390.94136136, 285.19929598],
									 [408.30136922, 284.45152241],
									 [418.27730849, 285.71568208],
									 [435.35072089, 285.04228274],
									 [449.12995098, 284.85272059],
									 [459.27121437, 284.40052727],
									 [482.84290825, 284.89488636],
									 [484.10431235, 285.63704351],
									 [503.22299145, 285.26521368],
									 [518.91742697, 284.54133192],
									 [526.87380117, 284.14967349],
									 [543.75707071, 284.55050505],
									 [552.30577537, 284.30583956],
									 [557.46519886, 283.68183396],
									 [554.66527778, 284.13472222],
									 [580.45      , 282.77380952],
									 [587.06666667, 284.06666667],
									 [591.1875    , 282.8125    ]]"""